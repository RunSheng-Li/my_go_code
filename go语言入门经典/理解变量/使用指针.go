//打印变量在内存中的地址
//------------------------------------------------------------------------------

//package main
//
//import (
//	"fmt"
//)
//
//func main() {
//	s := "呵呵呵"
//	fmt.Println(&s)
//
//}

//在go语言中声明变量时，将在计算机内存中给它分配一个位置，以便能够存储、修改和获取变量的值
//要获取变量在计算机内存中的地址，可在变量前加上&字符

//将变量作为值传递
//------------------------------------------------------------------------------
//package main
//
//import (
//	"fmt"
//)
//
//func showMemoryAddress(x int) {
//	fmt.Println(&x)
//	return
//}
//
//func main() {
//	i := 1
//	fmt.Println(&i)
//	showMemoryAddress(i)
//
//}

//将变量传递给函数时，会分配新内存并将变量的值复制到其中。这样将有两个变量实例，它们位于不同的内存单元中
//一般而言，这不可取，因为这将占用更多的内存，同时由于存在变量的多个副本，很容易引入bug。考虑这一点，go提供了指针

//将变量作为指针传递
//------------------------------------------------------------------------------
package main

import (
	"fmt"
)

func showMemoryAddress(x *int) {
	fmt.Println(x)
	return

}

func main() {
	i := 1
	fmt.Println(&i)
	showMemoryAddress(&i)
}

//指针是go语言中的一种类型，指向变量所在的内存单元。要声明指针，可在变量名前加上星号字符
//如果要使用指针指向的变量的值，而不是内存地址，怎么办？可在指针变量前加上星号